<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chart Generator</title>
    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/public/styles.css" />
    <!--Access Google Charts-->
    <script src="https://www.gstatic.com/charts/loader.js"></script>
  </head>

  <body>
    <h1>Chart Generator</h1>

    <div class="container">
      <h2>Create Chart</h2>
      <!--Chart Type-->
      <form action="/add" method="POST">
        <div class="form-group">
          <label for="chartOptions">Choose an option:</label>
          <select id="chartOptions" class="form-control" name="chartOptions">
            <option value="PieChart">Pie Chart</option>
            <option value="ColumnChart">Column Chart</option>
          </select>
        </div>

        <!--Chart Title-->
        <div class="form-group">
          <label for="chartTitle">Chart Title</label>
          <input
            type="text"
            class="form-control"
            name="chartTitle"
            placeholder="Enter chart title"
            required
          />
        </div>

        <!--Chart Section Number-->
        <div class="form-group">
          <label for="chartSections">Chart Sections</label>
          <select id="chartSections" class="form-control" name="chartSections">
            <option value="" selected disabled>-- Select Sections --</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
          </select>
        </div>

        <!--Chart Total-->
        <div class="form-group">
          <label for="chartTotal">Chart Total</label>
          <input
            type="number"
            class="form-control"
            name="chartTotal"
            placeholder="Enter total value of all sectors"
            required
            min="1"
            max="400"
          />
        </div>

        <!-- Container where sector inputs will be added dynamically -->
        <div id="chartFields"></div>

        <!-- Container where Column Chart inputs will be added dynamically -->
        <div id="ColumnChartFields"></div>

        <button class="btn btn-primary">Submit</button>
      </form>

      <br/> <!-- Breaks between form and chart -->
      <br/>
      
      <!--Chart Container-->
      <div id="myChart" 
      style="max-width: 700px;
             height: 400px;
             display: flex;
             justify-content: center;
             align-items: center;
             margin: auto;">
      </div>
    </div>

    <!--Creates Label Fields Dynamically-->
    <script src="/public/dynamicLabelFields.js" defer></script>

    <!--Creates Column Chart Fields Dynamically-->
    <script src="/public/formBar.js" defer></script>

    <!--Passes tblData to drawChart()-->
    <script>
      var tblData = <%- JSON.stringify(tblData) %>;  // Embed JSON into JS

      //loads google chart libraries
      google.charts.load("current", { packages: ["corechart"] });
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        //exits function if no table data available
        if (!tblData) return;

        //Draws pie chart if user selected pie chart
        if (tblData.chartOptions === "PieChart") {

            // Define datatable for chart
            var data = new google.visualization.DataTable();
            data.addColumn("string", "Label");
            data.addColumn("number", "Value");

            //variable to track sector values
            let runningTotal = 0;
            //variable for chart sections
            let sectionNumber = Number(tblData.chartSections);

            //Iterate over chart sections and store data in rows
            for (let i = 0; i < sectionNumber; i++) {

              //variable for section value
              let value = Number(tblData.chartSubtotal[i]);
              // Prevent negative/invalid values
              if (isNaN(value) || value < 0) value = 0; 

              //assigns difference of total and runningTotal to last sector value
              if (i == sectionNumber - 1) {
                let lastValue = Number(tblData.chartTotal) - runningTotal;
                  data.addRows([
                    [`${tblData.chartLabels[i]}`, lastValue]
                  ]);
              //assigns appropriate form value to other sector values
              } else {
                data.addRows([
                [`${tblData.chartLabels[i]}`, value]
              ]);
              }

              //adds each sector value to runningTotal
              runningTotal += value;
            }
          
            // Instantiate and draw the chart.
            var chart = new google.visualization.PieChart(
            document.getElementById("myChart")
            );

            //chart attributes
            var options = {
              width: 450,
              height: 450,
              title: `${tblData.chartTitle}`,
              titleTextStyle: {
                  color: "#333",
                  fontSize: 20,
                  bold: true
              },
              chartArea: { width: '80%', height: '80%' }
            };
          }
          //Draws Column Chart if user selected Column Chart
          else if (tblData.chartOptions === "ColumnChart") {

            var data = new google.visualization.DataTable();
            //Category name column
            data.addColumn("string", "Category");

            //Get number of sections from tblData
            let sectionNumber = Number(tblData.chartSections);

            //Color Array for custom colors
            //let colors = ['silver', 'gold', 'red', 'blue', 'yellow', 'green'];

            // Add separate Chart Label columns for each category
            for (let i = 0; i < sectionNumber; i++) {
              data.addColumn("number", tblData.chartLabels[i]); //Label column
              data.addColumn({ type: "string", role: "annotation" }); // Annotation column
            }

            //Stores sum of chart subTotals
            let runningTotal = 0;
            // First column is the category name
            let rowValues = ["Total"]; 

            //Iterates over sections and places values in array(rowValues))
            for (let i = 0; i < sectionNumber; i++) {
              //Assigns chart subTotal to value
              let value = Number(tblData.chartSubtotal[i]);
              
              //Calculates last section's value (total-runningTotal), pushes to array
              if (i === sectionNumber - 1) {
                let lastValue = Number(tblData.chartTotal - runningTotal);
                rowValues.push(lastValue);
                rowValues.push(lastValue.toString()); // Annotation text
              //otherwise pushes section value to array
              } else {
                rowValues.push(value);
                rowValues.push(value.toString()); // Annotation text
              }

              runningTotal += value;
            }

            //Adds array values to table rows
            data.addRows([rowValues]);


            // Create a new Column Chart and link it to HTML element
            var chart = new google.visualization.ColumnChart(
            document.getElementById("myChart")
            );

            //assign grid interval variable and initialize arrray
            let gridInterval = Number(tblData.gridInterval);
            let intervalArray = [];

            //write interval values to array
            for (let i = 0; i < 11; i++) {
              let intervalValue = gridInterval * i;
              intervalArray.push(intervalValue);
            }

            //Determines max value for horizontal gridlines
            let maxDataValue = Math.max(...tblData.chartSubtotal.map(Number));
            let maxValue = Math.max(maxDataValue, Number(tblData.chartTotal)); // Ensure max value covers all data


            //sets Column Chart attributes
            var options = {
              title: `${tblData.chartTitle}`,
              hAxis: {
                  title: `${tblData.xaxisTitle}`,
                  minValue: 0, // Minimum value on the horizontal axis
                  maxValue: maxValue,  //Maximum value on the horizontal axis
                  //Column Chart intervals
                  ticks: intervalArray,
                  gridlines: { count: 11 }
              },
              vAxis: {title: `${tblData.yaxisTitle}`},
              legend: { position: "right" },
              annotations: {
                textStyle: { fontSize: 12, color: "#000" }
              }
          };
        }
        //draw chart
        chart.draw(data, options);
      }
    </script>
  </body>
</html>
