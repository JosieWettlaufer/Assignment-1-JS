<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chart Generator</title>
    <link rel="stylesheet" href="/node_modules/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/public/styles.css" />
    <!--Access Google Charts-->
    <script src="https://www.gstatic.com/charts/loader.js"></script>
  </head>

  <body>
    <h1>Chart Generator</h1>

    <div class="container">
      <h2>Create Chart</h2>
      <!--Chart Type-->
      <form action="/add" method="POST">
        <div class="form-group">
          <label for="chartOptions">Choose an option:</label>
          <select id="chartOptions" class="form-control" name="chartOptions">
            <option value="PieChart">Pie Chart</option>
            <option value="ColumnChart">Column Chart</option>
          </select>
        </div>

        <!--Chart Title-->
        <div class="form-group">
          <label for="chartTitle">Chart Title</label>
          <input
            type="text"
            class="form-control"
            name="chartTitle"
            placeholder="Enter chart title"
            required
          />
        </div>

        <!--Chart Section Number-->
        <div class="form-group">
          <label for="chartSections">Chart Sections</label>
          <select id="chartSections" class="form-control" name="chartSections">
            <option value="" selected disabled>-- Select Sections --</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
          </select>
        </div>

        <!--Chart Total-->
        <div class="form-group">
          <label for="chartTotal">Chart Total</label>
          <input
            type="number"
            class="form-control"
            name="chartTotal"
            placeholder="Enter total value of all sectors"
            required
            min="1"
            max="400"
          />
        </div>

        <!-- Container where sector inputs will be added dynamically -->
        <div id="chartFields"></div>

        <!-- Container where Column Chart inputs will be added dynamically -->
        <div id="ColumnChartFields"></div>

        <button class="btn btn-primary">Submit</button>
      </form>

      <br/> <!-- Breaks between form and chart -->
      <br/>
      
      <!--Chart Container-->
      <div id="myChart" 
      style="max-width: 700px;
             height: 400px;
             display: flex;
             justify-content: center;
             align-items: center;
             margin: auto;">
      </div>
    </div>

    <!--Creates Label Fields Dynamically-->
    <script src="/public/dynamicLabelFields.js" defer></script>

    <!--Creates Column Chart Fields Dynamically-->
    <script src="/public/formBar.js" defer></script>

    <!--Passes tblData to drawChart()-->
    <script>
      var tblData = <%- JSON.stringify(tblData) %>;  // Embed JSON into JS

      //loads google chart libraries
      google.charts.load("current", { packages: ["corechart"] });
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        //exits function if no table data available
        if (!tblData) return;


        //color array
        var colors = ['silver', 'gold', 'red', 'blue', 'yellow', 'green'];

        // Define datatable for chart
        var data = new google.visualization.DataTable();
        data.addColumn("string", "Label");
        data.addColumn("number", "Value");
        data.addColumn({ role: 'style' }, "Color");

        //variable to track sector values
        let runningTotal = 0;
        //variable for chart sections
        let sectionNumber = Number(tblData.chartSections);

        //Iterate over chart sections and store data in rows
        for (let i = 0; i < sectionNumber; i++) {

          //variable for section value
          let value = Number(tblData.chartSubtotal[i]);
          // Prevent negative/invalid values
          if (isNaN(value) || value < 0) value = 0; 

          //assigns difference of total and runningTotal to last sector value
          if (i == sectionNumber - 1) {
            let lastValue = Number(tblData.chartTotal) - runningTotal;
            console.log(lastValue);
            if (lastValue < 0) lastValue = 1;
              data.addRows([
                [`${tblData.chartLabels[i]}`, lastValue, colors[i]]
              ]);
              break;
          //assigns appropriate form value to other sector values
          } else {
            data.addRows([
            [`${tblData.chartLabels[i]}`, value, colors[i]]
          ]);
          }

          //adds each sector value to runningTotal
          runningTotal += value;
        }

        //Draws pie chart if user selected pie chart
        if (tblData.chartOptions === "PieChart") {
          
            // Instantiate and draw the chart.
            var chart = new google.visualization.PieChart(
            document.getElementById("myChart")
            );

            //chart attributes
            var options = {
              width: 450,
              height: 450,
              title: `${tblData.chartTitle}`,
              titleTextStyle: {
                  color: "#333",
                  fontSize: 20,
                  bold: true
              },
              chartArea: { width: '80%', height: '80%' }
            };

        //Draws Column Chart if user selected Column Chart
        } else if (tblData.chartOptions === "ColumnChart") {
            var chart = new google.visualization.ColumnChart(
            document.getElementById("myChart")
            );

            //assign grid interval variable
            let gridInterval = tblData.gridInterval;

            //sets Column Chart attributes
            var options = {
              title: `${tblData.chartTitle}`,
              hAxis: {

                  title: `${tblData.xaxisTitle}`,
                  minValue: 0, // Minimum value on the horizontal axis
                  maxValue: gridInterval*10, // Maximum value on the horizontal axis
                  //Column Chart intervals
                  ticks: [0, gridInterval, gridInterval*2,
                          gridInterval*3, gridInterval*4,
                          gridInterval*5, gridInterval*6,
                          gridInterval*7, gridInterval*8,
                          gridInterval*9, gridInterval*10], 
                  gridlines: {
                      count: 11 // Sets 11 gridlines
                  }
              },
              vAxis: {
                  title: `${tblData.yaxisTitle}`,
              },
              legend: { position: "center" }
          };
        }
        //draw chart
        chart.draw(data, options);
      }
    </script>
  </body>
</html>
